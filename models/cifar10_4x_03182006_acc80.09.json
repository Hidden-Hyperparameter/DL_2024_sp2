{
    "model_type": "import torch.nn as nn\nimport torch.nn.functional as F\n\n# class ResBlock(nn.Module):\n#     def __init__(self,device) -> None:\n#         super().__init__()\n        \n#     def forward(self,x):\n#         return nn.ReLU(self.net(x)+x)\n# class BigResBlock(nn.Module):\n#     def __init__(self) -> None:\n#         super().__init__()\n#         self.net = [ResBlock(),ResBlock(),ResBlock()]\n#     def forward(self,x):\n#         for lyer in self.net:\n#             x=lyer(x)\n#         return x\nclass Net(nn.Module):\n    def createManyResBlock(self,channels=64,BlockNum=3,kernel_size=3):\n        self.cnt+=1\n        manyResBlock = []\n        for i in range(BlockNum):\n            x = nn.Sequential(\n                nn.Conv2d(channels,channels,kernel_size,padding=(kernel_size-1)//2),\n                nn.BatchNorm2d(channels),\n                nn.ReLU(),\n                # nn.Dropout2d(0.1),\n                nn.Conv2d(channels,channels,kernel_size,padding=(kernel_size-1)//2),\n            )\n            self.add_module(f'{self.cnt}_{i}',x)\n            manyResBlock.append(x)\n        return manyResBlock\n    def PassThrough(self,manyResBlock:list,x):\n        for i in range(len(manyResBlock)):\n            x = F.relu(x+manyResBlock[i](x))\n            # if i%2:\n            #     x = nn.MaxPool2d(2)(x)\n        return x\n\n    def __init__(self):\n        super(\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n            Net,self\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n        ).__init__()\n        self.cnt=0\n        \n        self.conv1 = nn.Sequential(\n            nn.Conv2d(3,64,7,stride=2,padding=3),\n            nn.BatchNorm2d(64),\n            nn.MaxPool2d(2),\n            # nn.Dropout2d(0.35)\n        )\n        self.manyResBlock1 = self.createManyResBlock()\n        self.conv2 =  nn.Sequential(\n            nn.Conv2d(64,128,3,stride=2,padding=1),\n            nn.BatchNorm2d(128),\n            nn.MaxPool2d(2),\n            # nn.Dropout2d(0.35)\n        )\n        self.manyResBlock2 = self.createManyResBlock(channels=128\n                                                    #  ,BlockNum=4\n                                                     )\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(128,192,3,padding=1),\n            nn.BatchNorm2d(192),\n            nn.MaxPool2d(2),\n            # nn.Dropout2d(0.35)\n            )\n        self.manyResBlock3 = self.createManyResBlock(channels=192\n                                                    #  ,BlockNum=5\n                                                     )\n        self.final = nn.Sequential(\n            nn.Linear(192,256),\n            # nn.Dropout1d(0.2),\n            nn.ReLU(),\n            nn.Linear(256,64),\n            # nn.Dropout1d(0.2),\n            nn.ReLU(),\n            nn.Linear(64,10),\n        )\n    def forward(self, x):\n        bsize = x.shape[0]\n        x = self.pre_process(x)\n        x = self.conv1(x)\n        # print('after conv1',x.shape)\n        x = self.PassThrough(self.manyResBlock1,x)\n        # print('after block 1',x.shape)\n        x = self.conv2(x)\n        # print('after conv2',x.shape)\n        x = self.PassThrough(self.manyResBlock2,x)\n        # print('after block 2',x.shape)\n        x = self.conv3(x)\n        # print('after conv3',x.shape)\n        x = self.PassThrough(self.manyResBlock3,x)\n        # print('after block 3',x.shape)\n        x = nn.AvgPool2d(4)(x)\n        y = x.reshape(bsize,-1)\n        x = self.final(y)\n        return x\n    def to(self,device):\n        self.final.to(device)\n        lst1 = [\n            self.conv1,\n                self.conv2,\n                self.conv3\n                ]\n        for i in lst1:\n            i.to(device)\n        lst = [\n            self.manyResBlock1,\n            self.manyResBlock2,\n            self.manyResBlock3\n            ]\n        for i in lst:\n            for j in i:\n                j.to(device)\n    def pre_process(self, x):\n        return x.float()",
    "train_history": [
        {
            "optimizer": {
                "lr": 0.001,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 5e-05,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 31.6225,
                    "valid accuracy": 42.08,
                    "loss": 0.05687146633863449,
                    "valid loss": 0.04780769720673561
                },
                {
                    "train accuracy": 42.7775,
                    "valid accuracy": 46.64,
                    "loss": 0.04836002737283707,
                    "valid loss": 0.046058930456638336
                },
                {
                    "train accuracy": 50.4925,
                    "valid accuracy": 57.31,
                    "loss": 0.04235166683793068,
                    "valid loss": 0.035742904990911484
                },
                {
                    "train accuracy": 57.2975,
                    "valid accuracy": 62.51,
                    "loss": 0.037110235542058945,
                    "valid loss": 0.032380279153585434
                },
                {
                    "train accuracy": 61.59,
                    "valid accuracy": 67.15,
                    "loss": 0.03362474963068962,
                    "valid loss": 0.028940733522176743
                },
                {
                    "train accuracy": 65.84,
                    "valid accuracy": 70.57,
                    "loss": 0.030364012345671654,
                    "valid loss": 0.025905050337314606
                },
                {
                    "train accuracy": 69.095,
                    "valid accuracy": 70.98,
                    "loss": 0.02751343697309494,
                    "valid loss": 0.025608297437429428
                },
                {
                    "train accuracy": 71.3175,
                    "valid accuracy": 77.47,
                    "loss": 0.02553153596818447,
                    "valid loss": 0.020425504073500633
                },
                {
                    "train accuracy": 73.5,
                    "valid accuracy": 78.13,
                    "loss": 0.02374725416302681,
                    "valid loss": 0.019844386726617813
                },
                {
                    "train accuracy": 75.2775,
                    "valid accuracy": 80.09,
                    "loss": 0.022426294162869453,
                    "valid loss": 0.01798931136727333
                }
            ]
        }
    ],
    "description": "\nRandomize the dataset after several train epochs, especially when the model seems to be stucked in some stage.\n                ",
    "test_acc": 76.36000000000001
}