{
    "model_type": "import torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass Net(nn.Module):\n\n    def __init__(self):\n        super(Net,self).__init__()\n        self.first = nn.Sequential(\n            nn.Conv2d(3,16,5),\n            nn.ReLU(),\n            nn.MaxPool2d(2,2)\n        )\n        self.block = nn.Sequential(\n            nn.Conv2d(16,16,5),\n            nn.ReLU(),\n            nn.MaxPool2d(2,2)\n        )\n        self.blocks = []\n        for _ in range(3):\n            self.blocks.append(self.block)\n\n        self.final = nn.Sequential(\n            nn.Linear(16 * 4 * 4, 120),\n            nn.ReLU(),\n            nn.Linear(120, 84),\n            nn.ReLU(),\n            nn.Linear(84,10)\n        )\n        # self.conv1 = nn.Conv2d(3, 16, 5)\n        # self.pool = nn.MaxPool2d(2, 2)\n        # self.conv2 = nn.Conv2d(16, 16, 5)\n        # self.conv3 = nn.Conv2d(16, 16, 5)\n        # self.fc1 = nn.Linear(16 * 4 * 4, 120)\n        # self.fc2 = nn.Linear(120, 84)\n        # self.fc3 = nn.Linear(84, 10)\n\n    def forward(self, x):\n        bsize = x.shape[0]\n        x = self.pre_process(x)\n        # print('original',x.shape)\n        x = self.first(x)\n        # print('after first',x.shape)\n        for block in self.blocks:\n            x = block(x)\n        # x = self.block(x)\n        # # print('after block 1',x.shape)\n        # x = self.block(x)\n        # # print('after block 2',x.shape)\n        # x = self.block(x)\n        # print('after block 3',x.shape)\n        x = self.final(x.reshape(bsize,-1))\n        # print('final output',x.shape)\n        # x = self.pool(F.relu(self.conv1(x)))\n        # x = self.pool(F.relu(self.conv2(x)))\n        # x = self.pool(F.relu(self.conv3(x)))\n        # x = x.view(-1, 16 * 4 * 4)\n        # x = F.relu(self.fc1(x))\n        # x = F.relu(self.fc2(x))\n        # x = self.fc3(x)\n        return x\n\n    def pre_process(self, x):\n        return x.float()",
    "train_history": [
        {
            "optimizer": {
                "lr": 0.003,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 0,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 30.33,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 38.3175,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 42.14,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 44.825,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 45.9125,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 46.9,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 47.55,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 48.34,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 49.2225,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 49.8275,
                    "valid accuracy": null
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.001,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 0,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 54.93,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 56.4175,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 57.9025,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 59.0925,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 60.035,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 60.75,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 61.6775,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 62.33,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 63.065,
                    "valid accuracy": null
                },
                {
                    "train accuracy": 63.855,
                    "valid accuracy": null
                }
            ]
        }
    ],
    "description": "\n    This is the best result using the provided network.\n    "
}