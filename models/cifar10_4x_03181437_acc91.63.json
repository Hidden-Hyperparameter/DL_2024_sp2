{
    "model_type": "import torch.nn as nn\nimport torch.nn.functional as F\n\n# class ResBlock(nn.Module):\n#     def __init__(self,device) -> None:\n#         super().__init__()\n        \n#     def forward(self,x):\n#         return nn.ReLU(self.net(x)+x)\n# class BigResBlock(nn.Module):\n#     def __init__(self) -> None:\n#         super().__init__()\n#         self.net = [ResBlock(),ResBlock(),ResBlock()]\n#     def forward(self,x):\n#         for lyer in self.net:\n#             x=lyer(x)\n#         return x\nclass Net(nn.Module):\n    def createManyResBlock(self,channels=64,BlockNum=3,kernel_size=3):\n        self.cnt+=1\n        manyResBlock = []\n        for i in range(BlockNum):\n            x = nn.Sequential(\n                nn.Conv2d(channels,channels,kernel_size,padding=(kernel_size-1)//2),\n                nn.BatchNorm2d(channels),\n                nn.ReLU(),\n                # nn.Dropout2d(0.1),\n                nn.Conv2d(channels,channels,kernel_size,padding=(kernel_size-1)//2),\n            )\n            self.add_module(f'{self.cnt}_{i}',x)\n            manyResBlock.append(x)\n        return manyResBlock\n    def PassThrough(self,manyResBlock:list,x):\n        for i in range(len(manyResBlock)):\n            x = F.relu(x+manyResBlock[i](x))\n            # if i%2:\n            #     x = nn.MaxPool2d(2)(x)\n        return x\n\n    def __init__(self):\n        super(\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n            Net,self\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n        ).__init__()\n        self.cnt=0\n        \n        self.conv1 = nn.Sequential(\n            nn.Conv2d(3,64,7,stride=2,padding=3),\n            nn.BatchNorm2d(64),\n            nn.MaxPool2d(2)\n        )\n        self.manyResBlock1 = self.createManyResBlock()\n        self.conv2 =  nn.Sequential(\n            nn.Conv2d(64,128,3,stride=2,padding=1),\n            nn.BatchNorm2d(128),\n            nn.MaxPool2d(2)\n        )\n        self.manyResBlock2 = self.createManyResBlock(channels=128\n                                                    #  ,BlockNum=4\n                                                     )\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(128,192,3,padding=1),\n            nn.BatchNorm2d(192),\n            nn.MaxPool2d(2)\n            )\n        self.manyResBlock3 = self.createManyResBlock(channels=192\n                                                    #  ,BlockNum=5\n                                                     )\n        self.final = nn.Sequential(\n            nn.Linear(192,256),\n            # nn.Dropout1d(0.2),\n            nn.ReLU(),\n            nn.Linear(256,64),\n            # nn.Dropout1d(0.2),\n            nn.ReLU(),\n            nn.Linear(64,10),\n        )\n    def forward(self, x):\n        bsize = x.shape[0]\n        x = self.pre_process(x)\n        x = self.conv1(x)\n        # print('after conv1',x.shape)\n        x = self.PassThrough(self.manyResBlock1,x)\n        # print('after block 1',x.shape)\n        x = self.conv2(x)\n        # print('after conv2',x.shape)\n        x = self.PassThrough(self.manyResBlock2,x)\n        # print('after block 2',x.shape)\n        x = self.conv3(x)\n        # print('after conv3',x.shape)\n        x = self.PassThrough(self.manyResBlock3,x)\n        # print('after block 3',x.shape)\n        x = nn.AvgPool2d(4)(x)\n        y = x.reshape(bsize,-1)\n        x = self.final(y)\n        return x\n    def to(self,device):\n        self.final.to(device)\n        lst1 = [\n            self.conv1,\n                self.conv2,\n                self.conv3\n                ]\n        for i in lst1:\n            i.to(device)\n        lst = [\n            self.manyResBlock1,\n            self.manyResBlock2,\n            self.manyResBlock3\n            ]\n        for i in lst:\n            for j in i:\n                j.to(device)\n    def pre_process(self, x):\n        return x.float()",
    "train_history": [
        {
            "optimizer": {
                "lr": 0.0007,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 8e-05,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 95.685,
                    "valid accuracy": 90.15,
                    "loss": 0.0009731644531711936
                },
                {
                    "train accuracy": 95.6775,
                    "valid accuracy": 90.58,
                    "loss": 0.0009637704351916909
                },
                {
                    "train accuracy": 95.865,
                    "valid accuracy": 89.79,
                    "loss": 0.0009454131941311061
                },
                {
                    "train accuracy": 95.47,
                    "valid accuracy": 90.86,
                    "loss": 0.0010128135327249765
                },
                {
                    "train accuracy": 95.685,
                    "valid accuracy": 90.37,
                    "loss": 0.0009439305285923183
                },
                {
                    "train accuracy": 95.8175,
                    "valid accuracy": 90.17,
                    "loss": 0.0009506128844805062
                },
                {
                    "train accuracy": 95.4575,
                    "valid accuracy": 90.49,
                    "loss": 0.001002289354801178
                },
                {
                    "train accuracy": 95.6375,
                    "valid accuracy": 90.99,
                    "loss": 0.0009637930779717863
                },
                {
                    "train accuracy": 95.515,
                    "valid accuracy": 90.82,
                    "loss": 0.0009831059724092484
                },
                {
                    "train accuracy": 95.6025,
                    "valid accuracy": 89.45,
                    "loss": 0.0010023851646110415
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.0007,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 0.0001,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 95.3125,
                    "valid accuracy": 89.92,
                    "loss": 0.0010533559834584594
                },
                {
                    "train accuracy": 95.3875,
                    "valid accuracy": 90.19,
                    "loss": 0.0010456535965204239
                },
                {
                    "train accuracy": 95.4475,
                    "valid accuracy": 90.18,
                    "loss": 0.0010580546222627163
                },
                {
                    "train accuracy": 95.1325,
                    "valid accuracy": 90.48,
                    "loss": 0.001072422368451953
                },
                {
                    "train accuracy": 95.065,
                    "valid accuracy": 89.21,
                    "loss": 0.001080864341929555
                },
                {
                    "train accuracy": 95.1925,
                    "valid accuracy": 90.86,
                    "loss": 0.001077549997717142
                },
                {
                    "train accuracy": 95.28,
                    "valid accuracy": 90.32,
                    "loss": 0.0010776439448818564
                },
                {
                    "train accuracy": 95.0675,
                    "valid accuracy": 90.26,
                    "loss": 0.0011031380854547024
                },
                {
                    "train accuracy": 95.0825,
                    "valid accuracy": 89.8,
                    "loss": 0.0011265389621257782
                },
                {
                    "train accuracy": 95.12,
                    "valid accuracy": 89.99,
                    "loss": 0.0011068357853218913
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.0004,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 0.00015,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 96.3725,
                    "valid accuracy": 91.01,
                    "loss": 0.0008208003710024059
                },
                {
                    "train accuracy": 96.575,
                    "valid accuracy": 91.38,
                    "loss": 0.0007606125436723232
                },
                {
                    "train accuracy": 96.79,
                    "valid accuracy": 91.52,
                    "loss": 0.000725177931599319
                },
                {
                    "train accuracy": 96.625,
                    "valid accuracy": 90.69,
                    "loss": 0.0007639184477739036
                },
                {
                    "train accuracy": 96.72,
                    "valid accuracy": 90.99,
                    "loss": 0.0007455599843524396
                },
                {
                    "train accuracy": 96.6,
                    "valid accuracy": 90.87,
                    "loss": 0.0007403132040053606
                },
                {
                    "train accuracy": 96.885,
                    "valid accuracy": 91.1,
                    "loss": 0.00070334313204512
                },
                {
                    "train accuracy": 96.715,
                    "valid accuracy": 91.21,
                    "loss": 0.0007339412113651633
                },
                {
                    "train accuracy": 96.615,
                    "valid accuracy": 90.73,
                    "loss": 0.0007577086216770113
                },
                {
                    "train accuracy": 96.59,
                    "valid accuracy": 91.08,
                    "loss": 0.0007598474621772766
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.0002,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 0.0002,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 97.7025,
                    "valid accuracy": 91.8,
                    "loss": 0.002050946233794093,
                    "valid loss": 0.009592495858669281
                },
                {
                    "train accuracy": 98.15,
                    "valid accuracy": 92.39,
                    "loss": 0.0016800311859697104,
                    "valid loss": 0.009281746111810207
                },
                {
                    "train accuracy": 98.0325,
                    "valid accuracy": 91.97,
                    "loss": 0.0017281726468354464,
                    "valid loss": 0.009730126708745956
                },
                {
                    "train accuracy": 98.15,
                    "valid accuracy": 91.74,
                    "loss": 0.0017067065928131342,
                    "valid loss": 0.010006708092987537
                },
                {
                    "train accuracy": 98.2875,
                    "valid accuracy": 91.66,
                    "loss": 0.001574595575220883,
                    "valid loss": 0.010062264278531075
                },
                {
                    "train accuracy": 98.315,
                    "valid accuracy": 91.75,
                    "loss": 0.0016214289935305715,
                    "valid loss": 0.009662670083343983
                },
                {
                    "train accuracy": 98.11,
                    "valid accuracy": 91.84,
                    "loss": 0.0016409375239163637,
                    "valid loss": 0.009661754593253136
                },
                {
                    "train accuracy": 98.2525,
                    "valid accuracy": 91.61,
                    "loss": 0.0016010761028155684,
                    "valid loss": 0.01028463989496231
                },
                {
                    "train accuracy": 98.3,
                    "valid accuracy": 91.85,
                    "loss": 0.0016048549441620708,
                    "valid loss": 0.009850566275417805
                },
                {
                    "train accuracy": 98.25,
                    "valid accuracy": 91.63,
                    "loss": 0.0015893138479441404,
                    "valid loss": 0.010006697848439217
                }
            ]
        }
    ],
    "description": "\n        ???        \n        ",
    "test_acc": 88.75999999999999
}