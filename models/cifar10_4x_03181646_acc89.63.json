{
    "model_type": "import torch.nn as nn\nimport torch.nn.functional as F\n\n# class ResBlock(nn.Module):\n#     def __init__(self,device) -> None:\n#         super().__init__()\n        \n#     def forward(self,x):\n#         return nn.ReLU(self.net(x)+x)\n# class BigResBlock(nn.Module):\n#     def __init__(self) -> None:\n#         super().__init__()\n#         self.net = [ResBlock(),ResBlock(),ResBlock()]\n#     def forward(self,x):\n#         for lyer in self.net:\n#             x=lyer(x)\n#         return x\nclass Net(nn.Module):\n    def createManyResBlock(self,channels=64,BlockNum=3,kernel_size=3):\n        self.cnt+=1\n        manyResBlock = []\n        for i in range(BlockNum):\n            x = nn.Sequential(\n                nn.Conv2d(channels,channels,kernel_size,padding=(kernel_size-1)//2),\n                nn.BatchNorm2d(channels),\n                nn.ReLU(),\n                # nn.Dropout2d(0.1),\n                nn.Conv2d(channels,channels,kernel_size,padding=(kernel_size-1)//2),\n            )\n            self.add_module(f'{self.cnt}_{i}',x)\n            manyResBlock.append(x)\n        return manyResBlock\n    def PassThrough(self,manyResBlock:list,x):\n        for i in range(len(manyResBlock)):\n            x = F.relu(x+manyResBlock[i](x))\n            # if i%2:\n            #     x = nn.MaxPool2d(2)(x)\n        return x\n\n    def __init__(self):\n        super(\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n            Net,self\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n        ).__init__()\n        self.cnt=0\n        \n        self.conv1 = nn.Sequential(\n            nn.Conv2d(3,64,7,stride=2,padding=3),\n            nn.BatchNorm2d(64),\n            nn.MaxPool2d(2),\n            # nn.Dropout2d(0.35)\n        )\n        self.manyResBlock1 = self.createManyResBlock()\n        self.conv2 =  nn.Sequential(\n            nn.Conv2d(64,128,3,stride=2,padding=1),\n            nn.BatchNorm2d(128),\n            nn.MaxPool2d(2),\n            # nn.Dropout2d(0.35)\n        )\n        self.manyResBlock2 = self.createManyResBlock(channels=128\n                                                    #  ,BlockNum=4\n                                                     )\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(128,192,3,padding=1),\n            nn.BatchNorm2d(192),\n            nn.MaxPool2d(2),\n            # nn.Dropout2d(0.35)\n            )\n        self.manyResBlock3 = self.createManyResBlock(channels=192\n                                                    #  ,BlockNum=5\n                                                     )\n        self.final = nn.Sequential(\n            nn.Linear(192,256),\n            # nn.Dropout1d(0.2),\n            nn.ReLU(),\n            nn.Linear(256,64),\n            # nn.Dropout1d(0.2),\n            nn.ReLU(),\n            nn.Linear(64,10),\n        )\n    def forward(self, x):\n        bsize = x.shape[0]\n        x = self.pre_process(x)\n        x = self.conv1(x)\n        # print('after conv1',x.shape)\n        x = self.PassThrough(self.manyResBlock1,x)\n        # print('after block 1',x.shape)\n        x = self.conv2(x)\n        # print('after conv2',x.shape)\n        x = self.PassThrough(self.manyResBlock2,x)\n        # print('after block 2',x.shape)\n        x = self.conv3(x)\n        # print('after conv3',x.shape)\n        x = self.PassThrough(self.manyResBlock3,x)\n        # print('after block 3',x.shape)\n        x = nn.AvgPool2d(4)(x)\n        y = x.reshape(bsize,-1)\n        x = self.final(y)\n        return x\n    def to(self,device):\n        self.final.to(device)\n        lst1 = [\n            self.conv1,\n                self.conv2,\n                self.conv3\n                ]\n        for i in lst1:\n            i.to(device)\n        lst = [\n            self.manyResBlock1,\n            self.manyResBlock2,\n            self.manyResBlock3\n            ]\n        for i in lst:\n            for j in i:\n                j.to(device)\n    def pre_process(self, x):\n        return x.float()",
    "train_history": [
        {
            "optimizer": {
                "lr": 0.0005,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 5e-05,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 35.46,
                    "valid accuracy": 46.23,
                    "loss": 0.05427122116088867,
                    "valid loss": 0.04525688663125038
                },
                {
                    "train accuracy": 48.9575,
                    "valid accuracy": 57.6,
                    "loss": 0.043975576758384705,
                    "valid loss": 0.03690849989652634
                },
                {
                    "train accuracy": 57.99,
                    "valid accuracy": 63.97,
                    "loss": 0.03660808503627777,
                    "valid loss": 0.03220337629318237
                },
                {
                    "train accuracy": 64.17,
                    "valid accuracy": 70.82,
                    "loss": 0.031568702310323715,
                    "valid loss": 0.025862855836749077
                },
                {
                    "train accuracy": 68.4725,
                    "valid accuracy": 74.72,
                    "loss": 0.027877675369381905,
                    "valid loss": 0.02280784212052822
                },
                {
                    "train accuracy": 71.5275,
                    "valid accuracy": 77.04,
                    "loss": 0.02531246282160282,
                    "valid loss": 0.021094482392072678
                },
                {
                    "train accuracy": 73.9175,
                    "valid accuracy": 77.49,
                    "loss": 0.023276004940271378,
                    "valid loss": 0.02044258639216423
                },
                {
                    "train accuracy": 76.155,
                    "valid accuracy": 79.4,
                    "loss": 0.021634137257933617,
                    "valid loss": 0.01890997216105461
                },
                {
                    "train accuracy": 77.5725,
                    "valid accuracy": 81.86,
                    "loss": 0.020229943096637726,
                    "valid loss": 0.01658223755657673
                },
                {
                    "train accuracy": 79.115,
                    "valid accuracy": 82.42,
                    "loss": 0.01904754526913166,
                    "valid loss": 0.01610930822789669
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.0005,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 5e-05,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 79.9425,
                    "valid accuracy": 83.36,
                    "loss": 0.018190765753388405,
                    "valid loss": 0.015473885461688042
                },
                {
                    "train accuracy": 81.245,
                    "valid accuracy": 83.84,
                    "loss": 0.01723424717783928,
                    "valid loss": 0.014679772779345512
                },
                {
                    "train accuracy": 81.515,
                    "valid accuracy": 83.82,
                    "loss": 0.01676863059401512,
                    "valid loss": 0.014956383965909481
                },
                {
                    "train accuracy": 82.63,
                    "valid accuracy": 84.75,
                    "loss": 0.01580801233649254,
                    "valid loss": 0.013638917356729507
                },
                {
                    "train accuracy": 83.415,
                    "valid accuracy": 85.2,
                    "loss": 0.015274935401976109,
                    "valid loss": 0.013513472862541676
                },
                {
                    "train accuracy": 83.705,
                    "valid accuracy": 86.23,
                    "loss": 0.014728731475770473,
                    "valid loss": 0.012775794602930546
                },
                {
                    "train accuracy": 84.51,
                    "valid accuracy": 86.22,
                    "loss": 0.014077619649469852,
                    "valid loss": 0.012619930319488049
                },
                {
                    "train accuracy": 85.02,
                    "valid accuracy": 86.14,
                    "loss": 0.013659000396728516,
                    "valid loss": 0.012782381847500801
                },
                {
                    "train accuracy": 85.35,
                    "valid accuracy": 86.63,
                    "loss": 0.013293224386870861,
                    "valid loss": 0.012353802099823952
                },
                {
                    "train accuracy": 85.66,
                    "valid accuracy": 87.13,
                    "loss": 0.012861974537372589,
                    "valid loss": 0.011867944151163101
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.0005,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 5e-05,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 86.35,
                    "valid accuracy": 86.5,
                    "loss": 0.01244652271270752,
                    "valid loss": 0.012481288984417915
                },
                {
                    "train accuracy": 86.5025,
                    "valid accuracy": 87.0,
                    "loss": 0.012353218160569668,
                    "valid loss": 0.01191815733909607
                },
                {
                    "train accuracy": 86.865,
                    "valid accuracy": 87.46,
                    "loss": 0.011844387277960777,
                    "valid loss": 0.01137941051274538
                },
                {
                    "train accuracy": 87.1175,
                    "valid accuracy": 87.97,
                    "loss": 0.011592966504395008,
                    "valid loss": 0.01104259118437767
                },
                {
                    "train accuracy": 87.5225,
                    "valid accuracy": 87.59,
                    "loss": 0.011314424686133862,
                    "valid loss": 0.011531030759215355
                },
                {
                    "train accuracy": 87.6925,
                    "valid accuracy": 88.27,
                    "loss": 0.011056438088417053,
                    "valid loss": 0.010605967603623867
                },
                {
                    "train accuracy": 88.2575,
                    "valid accuracy": 88.37,
                    "loss": 0.010714136064052582,
                    "valid loss": 0.011071686632931232
                },
                {
                    "train accuracy": 88.405,
                    "valid accuracy": 88.2,
                    "loss": 0.010448019951581955,
                    "valid loss": 0.011058664880692959
                },
                {
                    "train accuracy": 88.56,
                    "valid accuracy": 88.5,
                    "loss": 0.010353656485676765,
                    "valid loss": 0.010841292329132557
                },
                {
                    "train accuracy": 88.89,
                    "valid accuracy": 88.83,
                    "loss": 0.010053073987364769,
                    "valid loss": 0.010450021363794804
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.0005,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 5e-05,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 89.0075,
                    "valid accuracy": 88.87,
                    "loss": 0.009868232533335686,
                    "valid loss": 0.010233706794679165
                },
                {
                    "train accuracy": 89.1675,
                    "valid accuracy": 88.23,
                    "loss": 0.009723592549562454,
                    "valid loss": 0.011285297572612762
                },
                {
                    "train accuracy": 89.5575,
                    "valid accuracy": 88.67,
                    "loss": 0.009571119211614132,
                    "valid loss": 0.010782838799059391
                },
                {
                    "train accuracy": 89.6075,
                    "valid accuracy": 88.88,
                    "loss": 0.009408888407051563,
                    "valid loss": 0.010222488082945347
                },
                {
                    "train accuracy": 89.975,
                    "valid accuracy": 88.49,
                    "loss": 0.009243611246347427,
                    "valid loss": 0.011041228659451008
                },
                {
                    "train accuracy": 89.9825,
                    "valid accuracy": 89.49,
                    "loss": 0.0091332932934165,
                    "valid loss": 0.01049056276679039
                },
                {
                    "train accuracy": 90.425,
                    "valid accuracy": 88.27,
                    "loss": 0.008752887137234211,
                    "valid loss": 0.01099935919046402
                },
                {
                    "train accuracy": 90.4075,
                    "valid accuracy": 89.32,
                    "loss": 0.00872483104467392,
                    "valid loss": 0.010340847074985504
                },
                {
                    "train accuracy": 90.4225,
                    "valid accuracy": 89.13,
                    "loss": 0.008543043397367,
                    "valid loss": 0.01043673325330019
                },
                {
                    "train accuracy": 90.57,
                    "valid accuracy": 89.31,
                    "loss": 0.008508672006428242,
                    "valid loss": 0.010623623616993427
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.0005,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 5e-05,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": 10,
            "results": [
                {
                    "train accuracy": 90.7475,
                    "valid accuracy": 88.48,
                    "loss": 0.008349079638719559,
                    "valid loss": 0.01079259067773819
                },
                {
                    "train accuracy": 90.9125,
                    "valid accuracy": 88.77,
                    "loss": 0.008182174526154995,
                    "valid loss": 0.010560507886111736
                },
                {
                    "train accuracy": 91.1375,
                    "valid accuracy": 90.11,
                    "loss": 0.008094054646790028,
                    "valid loss": 0.009631498716771603
                },
                {
                    "train accuracy": 91.1675,
                    "valid accuracy": 89.78,
                    "loss": 0.008008543401956558,
                    "valid loss": 0.01000814326107502
                },
                {
                    "train accuracy": 91.3,
                    "valid accuracy": 89.53,
                    "loss": 0.007770913653075695,
                    "valid loss": 0.009913883171975613
                },
                {
                    "train accuracy": 91.33,
                    "valid accuracy": 88.92,
                    "loss": 0.007871303707361221,
                    "valid loss": 0.010489341802895069
                },
                {
                    "train accuracy": 91.4875,
                    "valid accuracy": 89.7,
                    "loss": 0.007709052879363298,
                    "valid loss": 0.009900769218802452
                },
                {
                    "train accuracy": 91.7175,
                    "valid accuracy": 90.11,
                    "loss": 0.007486688904464245,
                    "valid loss": 0.009689955972135067
                },
                {
                    "train accuracy": 91.74,
                    "valid accuracy": 89.58,
                    "loss": 0.0073923589661717415,
                    "valid loss": 0.010066688992083073
                },
                {
                    "train accuracy": 91.795,
                    "valid accuracy": 89.63,
                    "loss": 0.007374485023319721,
                    "valid loss": 0.010055295191705227
                }
            ]
        }
    ],
    "description": "Auto-run by machine",
    "test_acc": null
}