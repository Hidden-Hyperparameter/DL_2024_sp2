{
    "model_type": "import torch.nn as nn\nimport torch.nn.functional as F\n\n# class ResBlock(nn.Module):\n#     def __init__(self,device) -> None:\n#         super().__init__()\n        \n#     def forward(self,x):\n#         return nn.ReLU(self.net(x)+x)\n# class BigResBlock(nn.Module):\n#     def __init__(self) -> None:\n#         super().__init__()\n#         self.net = [ResBlock(),ResBlock(),ResBlock()]\n#     def forward(self,x):\n#         for lyer in self.net:\n#             x=lyer(x)\n#         return x\nclass Net(nn.Module):\n    \n    def __init__(self):\n        super(Net,self).__init__()\n        self.resBlock1 = self.resBlock2 = self.resBlock3 = nn.Sequential(\n            nn.Conv2d(16,16,5,padding=2),\n            nn.ReLU(),\n            nn.Conv2d(16,16,5,padding=2),\n        )\n        self.manyResBlock=[self.resBlock1,self.resBlock2,self.resBlock3]\n        # for _ in range(3):\n        #     self.manyResBlock.append(self.resBlock)\n        # [self.resBlock,self.resBlock,self.resBlock]\n        self.first = nn.Sequential(\n            nn.Conv2d(3,16,5),\n            nn.ReLU(),\n            nn.MaxPool2d(2,2)\n        )\n        # self.blocks = []\n        # for _ in range(3):\n        #     self.blocks.append(self.manyResBlock)\n        #     self.blocks.append(nn.MaxPool2d(2,2))\n        self.final = nn.Sequential(\n            nn.Linear(16 * 7 * 7, 120),\n            nn.ReLU(),\n            nn.Linear(120, 84),\n            nn.ReLU(),\n            nn.Linear(84,10)\n        )\n        # self.conv1 = nn.Conv2d(3, 16, 5)\n        # self.pool = nn.MaxPool2d(2, 2)\n        # self.conv2 = nn.Conv2d(16, 16, 5)\n        # self.conv3 = nn.Conv2d(16, 16, 5)\n        # self.fc1 = nn.Linear(16 * 4 * 4, 120)\n        # self.fc2 = nn.Linear(120, 84)\n        # self.fc3 = nn.Linear(84, 10)\n    def ResBlock(self,x,i):\n        return nn.ReLU()(x+self.manyResBlock[i](x))\n    def ManyResBlock(self,x):\n        for i in range(3):\n            x = self.ResBlock(x,i)\n            x = nn.MaxPool2d(2,2)(x)\n        return x\n    def forward(self, x):\n        bsize = x.shape[0]\n        x = self.pre_process(x)\n        # print('original',x.shape)\n        x = self.first(x)\n        # print('after first',x.shape)\n        # for i in range(self.blocksNum):\n        #     x = self.BigRes(self,x,i)\n        # for block in self.blocks:\n        #     x = block(x)\n            # print(x.shape)\n        x = self.ManyResBlock(x)\n        # x = self.block(x)\n        # # print('after block 1',x.shape)\n        # x = self.block(x)\n        # # print('after block 2',x.shape)\n        # x = self.block(x)\n        # print('after block 3',x.shape)\n        # print('still alive:')\n        x = self.final(x.reshape(bsize,-1))\n        # print('final output',x.shape)\n        # x = self.pool(F.relu(self.conv1(x)))\n        # x = self.pool(F.relu(self.conv2(x)))\n        # x = self.pool(F.relu(self.conv3(x)))\n        # x = x.view(-1, 16 * 4 * 4)\n        # x = F.relu(self.fc1(x))\n        # x = F.relu(self.fc2(x))\n        # x = self.fc3(x)\n        return x\n\n    def pre_process(self, x):\n        return x.float()",
    "train_history": [
        {
            "optimizer": {
                "lr": 0.001,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 0,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": "no.1",
            "results": [
                {
                    "train accuracy": 78.6175,
                    "valid accuracy": 70.1
                },
                {
                    "train accuracy": 80.1675,
                    "valid accuracy": 70.5
                },
                {
                    "train accuracy": 81.4075,
                    "valid accuracy": 69.91
                },
                {
                    "train accuracy": 82.2475,
                    "valid accuracy": 70.29
                },
                {
                    "train accuracy": 83.395,
                    "valid accuracy": 69.7
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.001,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 0,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": "no.2",
            "results": [
                {
                    "train accuracy": 78.6175,
                    "valid accuracy": 70.1
                },
                {
                    "train accuracy": 80.1675,
                    "valid accuracy": 70.5
                },
                {
                    "train accuracy": 81.4075,
                    "valid accuracy": 69.91
                },
                {
                    "train accuracy": 82.2475,
                    "valid accuracy": 70.29
                },
                {
                    "train accuracy": 83.395,
                    "valid accuracy": 69.7
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.001,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 0,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": "no.3",
            "results": [
                {
                    "train accuracy": 78.6175,
                    "valid accuracy": 70.1
                },
                {
                    "train accuracy": 80.1675,
                    "valid accuracy": 70.5
                },
                {
                    "train accuracy": 81.4075,
                    "valid accuracy": 69.91
                },
                {
                    "train accuracy": 82.2475,
                    "valid accuracy": 70.29
                },
                {
                    "train accuracy": 83.395,
                    "valid accuracy": 69.7
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.001,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 0,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": "no.4",
            "results": [
                {
                    "train accuracy": 78.6175,
                    "valid accuracy": 70.1
                },
                {
                    "train accuracy": 80.1675,
                    "valid accuracy": 70.5
                },
                {
                    "train accuracy": 81.4075,
                    "valid accuracy": 69.91
                },
                {
                    "train accuracy": 82.2475,
                    "valid accuracy": 70.29
                },
                {
                    "train accuracy": 83.395,
                    "valid accuracy": 69.7
                }
            ]
        },
        {
            "optimizer": {
                "lr": 0.001,
                "betas": [
                    0.9,
                    0.999
                ],
                "eps": 1e-08,
                "weight_decay": 0,
                "amsgrad": false,
                "maximize": false,
                "foreach": null,
                "capturable": false,
                "differentiable": false,
                "fused": null
            },
            "epochs": "no.5",
            "results": [
                {
                    "train accuracy": 78.6175,
                    "valid accuracy": 70.1
                },
                {
                    "train accuracy": 80.1675,
                    "valid accuracy": 70.5
                },
                {
                    "train accuracy": 81.4075,
                    "valid accuracy": 69.91
                },
                {
                    "train accuracy": 82.2475,
                    "valid accuracy": 70.29
                },
                {
                    "train accuracy": 83.395,
                    "valid accuracy": 69.7
                }
            ]
        }
    ],
    "description": "\n    This is the best result using the provided network.\n    "
}